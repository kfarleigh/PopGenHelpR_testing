source("./Private.alleles.R")
setwd("C:/Users/keaka/OneDrive/Desktop/Github/PopGenHelpR_testing")
library(PopGenHelpR)
data("HornedLizard_VCF")
data("HornedLizard_Pop")
Test_up <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = FALSE)
source("./Private.alleles.R")
source("../PopGenHelpR/R/Private.alleles.R")
Test_up <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = FALSE)
Test_up$Private.Allele.Metadata
Test_up$Private.Allele.Count
remove(Private.alleles())
remove(Private.alleles
)
library(PopGenHelpR)
Test_up_og <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = FALSE)
Test_up_og$Private.Allele.Count
wiens_files <- list.files(pattern = "weins*", full.names = T)
wiens_pops <- read.csv(wiens_files[1])
wiens_vcf <- read.vcfR(wiens_files[2])
Test_p <- Private.alleles(data = wiens_vcf, pops = wiens_pops, write = FALSE)
warnings()
source("../PopGenHelpR/R/Private.alleles.R")
Test_p <- Private.alleles(data = wiens_vcf, pops = wiens_pops, write = FALSE)
warnings()
Dat <- wiens_vcf
# Convert the vcf gt slot to a geno style table for calculations
gt <- vcfR::extract.gt(Dat, return.alleles = TRUE)
Dat <- as.data.frame(t(as.matrix(gt)))
# Make missing data (.) NAs
Dat[Dat == '.'] <- NA
# Preserve individual names
Inds <- rownames(Dat)
Pops <- wiens_pops
Pops <- as.factor(Pops[,2])
P <- Pops
Dat <- cbind.data.frame(Inds, P, Dat)
# Break into list with populations for each element
Dat_perpop <- list()
for(i in unique(P)){
Dat_perpop[[i]] <- Dat[which(Dat[,2] == i),]
}
grepl("/", gt[1,2])
grepl("|", gt[1,2])
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
Uniq_alleles <- function(x) {
tmp_res <- list()
for(i in 3:ncol(x)){
if(grepl("/", gt[1,2])){
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
} else{
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
}
if(length(tmp) > 0){
tmp_res[[i]] <- tmp
} else{
tmp_res[[i]] <- NA
}
remove(tmp)
}
tmp_res <- as.data.frame(do.call("rbind", tmp_res))
rownames(tmp_res) <- colnames(x[3:ncol(x)])
return(tmp_res)
}
PA_perpop <- lapply(Dat_perpop, Uniq_alleles)
warnings()
test_dat <- Dat_perpop[[1]]
View(test_dat)
x = test_dat
for(i in 3:ncol(x)){
if(grepl("/", gt[1,2])){
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
} else{
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
}
if(length(tmp) > 0){
tmp_res[[i]] <- tmp
} else{
tmp_res[[i]] <- NA
}
remove(tmp)
}
tmp_res <- list()
for(i in 3:ncol(x)){
if(grepl("/", gt[1,2])){
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
} else{
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
}
if(length(tmp) > 0){
tmp_res[[i]] <- tmp
} else{
tmp_res[[i]] <- NA
}
remove(tmp)
}
View(tmp_res)
tmp <- unique(stats::na.omit(unlist(strsplit(x[,3], split = '|'))))
View(x)
x2 <- extract.gt(HornedLizard_VCF, return.alleles = T)
View(x2)
unique(stats::na.omit(unlist(strsplit(x2[,1], split = '|'))))
which(tmp == "|")
Dat <- HornedLizard_VCF
Pops <- HornedLizard_Pop
Inds_popmap <- Pops[,1]
# Convert the vcf gt slot to a geno style table for calculations
gt <- vcfR::extract.gt(Dat, return.alleles = TRUE)
Dat <- as.data.frame(t(as.matrix(gt)))
# Make missing data (.) NAs
Dat[Dat == '.'] <- NA
# Preserve individual names
Inds <- rownames(Dat)
P <- Pops
Pops <- as.factor(Pops[,2])
P <- Pops
Dat <- cbind.data.frame(Inds, P, Dat)
View(Dat)
# Break into list with populations for each element
Dat_perpop <- list()
for(i in unique(P)){
Dat_perpop[[i]] <- Dat[which(Dat[,2] == i),]
}
x2 <- Dat_perpop[[1]]
tmp_res <- list()
for(i in 3:ncol(x)){
if(grepl("/", gt[1,2])){
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
tmp <- tmp[]
} else{
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
}
if(length(tmp) > 0){
tmp_res[[i]] <- tmp
} else{
tmp_res[[i]] <- NA
}
remove(tmp)
}
View(tmp_res)
for(i in 3:ncol(x2)){
if(grepl("/", gt[1,2])){
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
tmp <- tmp[]
} else{
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
}
if(length(tmp) > 0){
tmp_res[[i]] <- tmp
} else{
tmp_res[[i]] <- NA
}
remove(tmp)
}
View(tmp_res)
View(x2)
tmp_res <- list()
for(i in 3:ncol(x2)){
if(grepl("/", gt[1,2])){
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
tmp <- tmp[]
} else{
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
}
if(length(tmp) > 0){
tmp_res[[i]] <- tmp
} else{
tmp_res[[i]] <- NA
}
remove(tmp)
}
View(tmp_res)
tmp_res <- list()
Uniq_alleles <- function(x) {
tmp_res <- list()
for(i in 3:ncol(x)){
if(grepl("/", gt[1,2])){
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
tmp <- tmp[]
} else{
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
}
if(length(tmp) > 0){
tmp_res[[i]] <- tmp
} else{
tmp_res[[i]] <- NA
}
remove(tmp)
}
tmp_res <- as.data.frame(do.call("rbind", tmp_res))
rownames(tmp_res) <- colnames(x[3:ncol(x)])
return(tmp_res)
}
PA_perpop <- lapply(Dat_perpop, Uniq_alleles)
View(PA_perpop)
PA_perpop[["East"]]
tmp <- unique(stats::na.omit(unlist(strsplit(x2[,i], split = '/'))))
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
tmp2 <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
tmp <- unique(stats::na.omit(unlist(strsplit(x2[,i], split = '/'))))
View(x2)
View(x)
strsplit(x[,i])
strsplit(x[,i], split = "|")
unlist(strsplit(x[,i], split = "|"))
stats::na.omit(unlist(strsplit(x[,i], split = "|")))
unique(stats::na.omit(unlist(strsplit(x[,i], split = "|"))))
unique(stats::na.omit(unlist(strsplit(x2[,i], split = "/"))))
strsplit(x2[,i], split = "/")
unique(stats::na.omit(unlist(strsplit(x[,i], split = "|", fixed = T))))
strsplit(x[,i], split = "|", fixed = TRUE)
source("../PopGenHelpR/R/Private.alleles.R")
Test_p <- Private.alleles(data = wiens_vcf, pops = wiens_pops)
Test_p <- Private.alleles(data = wiens_vcf, pops = wiens_pops)
Test_p$Private.Allele.Count
library(mmod)
library(adegenet)
library(hierfstat)
library(StAMPP)
library(stringr)
library(vcfR)
library(PopGenHelpR)
library(tidyr)
#######################################
##### Farleigh et al. (2021) data #####
#######################################
data("HornedLizard_VCF")
data("HornedLizard_Pop")
# Make horned lizard data into a genind
Genind <- vcfR2genind(HornedLizard_VCF)
Genind@pop <- as.factor(HornedLizard_Pop$Population)
ploidy(Genind) <- 2
# Make horned lizard data into a genlight
Glight <- vcfR2genlight(HornedLizard_VCF)
Glight@pop <- as.factor(HornedLizard_Pop$Population)
ploidy(Glight) <- 2
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "HL_test_all", write = T)
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "HL_test_all", write = TRUE)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Popprefix = "HL_test_het_all", write = TRUE)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./HL_test_het_all", write = TRUE)
list.files(pattern = "./*")
list.files(path = tempdir(), pattern = "./*")
tempdir()
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE,  prefix = "./HL_test_het_all")
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE, statistic = "Ho")
write.csv(PGH_het_HL, file = "Test.csv")
PGH_het_HL
write.csv(PGH_het_HL$Ho_perpop, file = "Test.csv")
getwd()
i = 1
file_name <- paste0(prefix, "_", names(PGH_het_HL)[i], ".csv")
prefix <- "test"
file_name <- paste0(prefix, "_", names(PGH_het_HL)[i], ".csv")
write.csv(my_list[[i]], file = file_name, row.names = FALSE)
write.csv(PGH_het_HL[[i]], file = file_name, row.names = FALSE)
write = TRUE
write == TRUE && !is.null(prefix)
write == TRUE & !is.null(prefix)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE, statistic = "Ho", prefix = NULL)
for (i in 1:length(PGH_het_HL)){
utils::write.csv(PGH_het_HL, file = paste(names(Output2write[i]), ".csv", sep = "_"))
}
for (i in 1:length(PGH_het_HL)){
utils::write.csv(PGH_het_HL, file = paste(names(PGH_het_HL[i]), ".csv", sep = "_"))
}
utils::write.csv(Output2write, file = paste(names(Output2write[i]), ".csv"))
utils::write.csv(PGH_het_HL, file = paste(names(PGH_het_HL[i]), ".csv"))
utils::write.csv(PGH_het_HL, file = paste(names(PGH_het_HL), ".csv"))
source("../PopGenHelpR/R/Heterozygosity.R")
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
source("../PopGenHelpR/R/Heterozygosity.R")
getwd()
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
# Set list of possible statistics
Stat <- c("Ho", "He", "PHt", "Hs_exp", "Hs_obs", "IR", "HL")
which(Stat %in% statistic)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "Ho")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "Ho")
statistics = "Ho"
which(Stat %in% statistic)
statistic = "Ho"
which(Stat %in% statistic)
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "He")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "Ho")
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "all")
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "all")
source("../PopGenHelpR/R/Differentiation.R")
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "HL_test_dif_all", write = T)
PGH_PA_HL <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_pa", write = TRUE)
library(mmod)
library(adegenet)
library(hierfstat)
library(StAMPP)
library(stringr)
library(vcfR)
library(PopGenHelpR)
library(tidyr)
data("HornedLizard_VCF")
data("HornedLizard_Pop")
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "./write_test_wprefix/HL_test_dif_all", write = T)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_het_all", write = TRUE, statistic = "all")
PGH_PA_HL <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_pa", write = TRUE)
# Let's just try a single statistic for each
Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst", prefix = "./write_test_wprefix/HL_test_dif_Fst", write = T)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_het_Ho", write = TRUE, statistic = "Ho")
# Let's try with no prefix
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all",, write = T)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE, statistic = "all")
PGH_PA_HL <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE)
# Let's just try a single statistic for each, without a prefix
Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst", write = T)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE, statistic = "Ho")
test <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = FALSE, statistic = "Ho")
library(mmod)
library(adegenet)
library(hierfstat)
library(StAMPP)
library(stringr)
library(vcfR)
library(PopGenHelpR)
library(tidyr)
data("HornedLizard_VCF")
data("HornedLizard_Pop")
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "./write_test_wprefix/HL_test_dif_all", write = T)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_het_all", write = TRUE, statistic = "all")
PGH_PA_HL <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_pa", write = TRUE)
# Let's just try a single statistic for each, with a prefix
Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst", prefix = "./write_test_wprefix/HL_test_dif_Fst", write = T)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_het_Ho", write = TRUE, statistic = "Ho")
Test <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Ho")
# Let's just try a single statistic for each, with a prefix
Test <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst")
