if(grepl("/", gt[1,2])){
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
tmp <- tmp[]
} else{
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
}
if(length(tmp) > 0){
tmp_res[[i]] <- tmp
} else{
tmp_res[[i]] <- NA
}
remove(tmp)
}
tmp_res <- as.data.frame(do.call("rbind", tmp_res))
rownames(tmp_res) <- colnames(x[3:ncol(x)])
return(tmp_res)
}
PA_perpop <- lapply(Dat_perpop, Uniq_alleles)
View(PA_perpop)
PA_perpop[["East"]]
tmp <- unique(stats::na.omit(unlist(strsplit(x2[,i], split = '/'))))
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
tmp2 <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '|'))))
tmp <- unique(stats::na.omit(unlist(strsplit(x[,i], split = '/'))))
tmp <- unique(stats::na.omit(unlist(strsplit(x2[,i], split = '/'))))
View(x2)
View(x)
strsplit(x[,i])
strsplit(x[,i], split = "|")
unlist(strsplit(x[,i], split = "|"))
stats::na.omit(unlist(strsplit(x[,i], split = "|")))
unique(stats::na.omit(unlist(strsplit(x[,i], split = "|"))))
unique(stats::na.omit(unlist(strsplit(x2[,i], split = "/"))))
strsplit(x2[,i], split = "/")
unique(stats::na.omit(unlist(strsplit(x[,i], split = "|", fixed = T))))
strsplit(x[,i], split = "|", fixed = TRUE)
source("../PopGenHelpR/R/Private.alleles.R")
Test_p <- Private.alleles(data = wiens_vcf, pops = wiens_pops)
Test_p <- Private.alleles(data = wiens_vcf, pops = wiens_pops)
Test_p$Private.Allele.Count
library(mmod)
library(adegenet)
library(hierfstat)
library(StAMPP)
library(stringr)
library(vcfR)
library(PopGenHelpR)
library(tidyr)
#######################################
##### Farleigh et al. (2021) data #####
#######################################
data("HornedLizard_VCF")
data("HornedLizard_Pop")
# Make horned lizard data into a genind
Genind <- vcfR2genind(HornedLizard_VCF)
Genind@pop <- as.factor(HornedLizard_Pop$Population)
ploidy(Genind) <- 2
# Make horned lizard data into a genlight
Glight <- vcfR2genlight(HornedLizard_VCF)
Glight@pop <- as.factor(HornedLizard_Pop$Population)
ploidy(Glight) <- 2
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "HL_test_all", write = T)
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "HL_test_all", write = TRUE)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Popprefix = "HL_test_het_all", write = TRUE)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./HL_test_het_all", write = TRUE)
list.files(pattern = "./*")
list.files(path = tempdir(), pattern = "./*")
tempdir()
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE,  prefix = "./HL_test_het_all")
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE, statistic = "Ho")
write.csv(PGH_het_HL, file = "Test.csv")
PGH_het_HL
write.csv(PGH_het_HL$Ho_perpop, file = "Test.csv")
getwd()
i = 1
file_name <- paste0(prefix, "_", names(PGH_het_HL)[i], ".csv")
prefix <- "test"
file_name <- paste0(prefix, "_", names(PGH_het_HL)[i], ".csv")
write.csv(my_list[[i]], file = file_name, row.names = FALSE)
write.csv(PGH_het_HL[[i]], file = file_name, row.names = FALSE)
write = TRUE
write == TRUE && !is.null(prefix)
write == TRUE & !is.null(prefix)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE, statistic = "Ho", prefix = NULL)
for (i in 1:length(PGH_het_HL)){
utils::write.csv(PGH_het_HL, file = paste(names(Output2write[i]), ".csv", sep = "_"))
}
for (i in 1:length(PGH_het_HL)){
utils::write.csv(PGH_het_HL, file = paste(names(PGH_het_HL[i]), ".csv", sep = "_"))
}
utils::write.csv(Output2write, file = paste(names(Output2write[i]), ".csv"))
utils::write.csv(PGH_het_HL, file = paste(names(PGH_het_HL[i]), ".csv"))
utils::write.csv(PGH_het_HL, file = paste(names(PGH_het_HL), ".csv"))
source("../PopGenHelpR/R/Heterozygosity.R")
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
source("../PopGenHelpR/R/Heterozygosity.R")
getwd()
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE)
# Set list of possible statistics
Stat <- c("Ho", "He", "PHt", "Hs_exp", "Hs_obs", "IR", "HL")
which(Stat %in% statistic)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "Ho")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "Ho")
statistics = "Ho"
which(Stat %in% statistic)
statistic = "Ho"
which(Stat %in% statistic)
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "He")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "Ho")
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "all")
source("../PopGenHelpR/R/Heterozygosity.R")
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_het_all", write = TRUE, statistic = "all")
source("../PopGenHelpR/R/Differentiation.R")
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "HL_test_dif_all", write = T)
PGH_PA_HL <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "HL_test_pa", write = TRUE)
library(mmod)
library(adegenet)
library(hierfstat)
library(StAMPP)
library(stringr)
library(vcfR)
library(PopGenHelpR)
library(tidyr)
data("HornedLizard_VCF")
data("HornedLizard_Pop")
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "./write_test_wprefix/HL_test_dif_all", write = T)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_het_all", write = TRUE, statistic = "all")
PGH_PA_HL <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_pa", write = TRUE)
# Let's just try a single statistic for each
Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst", prefix = "./write_test_wprefix/HL_test_dif_Fst", write = T)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_het_Ho", write = TRUE, statistic = "Ho")
# Let's try with no prefix
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all",, write = T)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE, statistic = "all")
PGH_PA_HL <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE)
# Let's just try a single statistic for each, without a prefix
Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst", write = T)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE, statistic = "Ho")
test <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = FALSE, statistic = "Ho")
library(mmod)
library(adegenet)
library(hierfstat)
library(StAMPP)
library(stringr)
library(vcfR)
library(PopGenHelpR)
library(tidyr)
data("HornedLizard_VCF")
data("HornedLizard_Pop")
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "./write_test_wprefix/HL_test_dif_all", write = T)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_het_all", write = TRUE, statistic = "all")
PGH_PA_HL <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_pa", write = TRUE)
# Let's just try a single statistic for each, with a prefix
Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst", prefix = "./write_test_wprefix/HL_test_dif_Fst", write = T)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_het_Ho", write = TRUE, statistic = "Ho")
Test <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Ho")
# Let's just try a single statistic for each, with a prefix
Test <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst")
library(mmod)
library(adegenet)
library(hierfstat)
library(StAMPP)
library(stringr)
library(vcfR)
library(PopGenHelpR)
library(tidyr)
#######################################
##### Farleigh et al. (2021) data #####
#######################################
data("HornedLizard_VCF")
data("HornedLizard_Pop")
# Make horned lizard data into a genind
Genind <- vcfR2genind(HornedLizard_VCF)
Genind@pop <- as.factor(HornedLizard_Pop$Population)
ploidy(Genind) <- 2
# Make horned lizard data into a genlight
Glight <- vcfR2genlight(HornedLizard_VCF)
Glight@pop <- as.factor(HornedLizard_Pop$Population)
ploidy(Glight) <- 2
# Calculate differentiation measures
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all")
PGH_dif_HL_mat <- as.matrix(PGH_dif_HL$JostsD)
# Jost's D with mmod for the horned lizard data
mmod <- pairwise_D(Genind)
mmod_mat <- as.matrix(mmod)
## Fst and Nei's D with StAMPP for the horned lizard data
# Fst
Stmp_fst <- stamppFst(Glight, nboots = 0)
# Population Nei's D
Stmp_popND <- stamppNeisD(Glight)
# Individual Nei's D
Stmp_indND <- stamppNeisD(Glight, pop = FALSE)
#######################################
##### Weins & Collela (2025) data #####
#######################################
wiens_files <- list.files(pattern = "weins*", full.names = T)
wiens_pops <- read.csv(wiens_files[1])
wiens_vcf <- read.vcfR(wiens_files[2])
### Differentiation
Genind2 <- vcfR2genind(wiens_vcf)
Genind2@pop <- as.factor(wiens_pops$Population)
ploidy(Genind2) <- 2
Glight2 <- vcfR2genlight(wiens_vcf)
Glight2@pop <- as.factor(wiens_pops$Population)
ploidy(Glight2) <- 2
# VCF
PGH_wiens_dif_vcf <- Differentiation(data = wiens_files[2], pops = wiens_pops, statistic = "all")
# vcfR object
PGH_wiens_dif_vcfR <- Differentiation(data = wiens_vcf, pops = wiens_pops, statistic = "all")
# geno file
PGH_wiens_dif_geno <- Differentiation(data = wiens_files[3], pops = wiens_pops, statistic = "all", missing_value = '-1') # Stopped here
### Let's make sure that PGH gives the same estimates no matter what was used as input
# Fst
table(PGH_wiens_dif_geno$Fst == PGH_wiens_dif_vcf$Fst)
table(PGH_wiens_dif_geno$Fst == PGH_wiens_dif_vcfR$Fst)
# Population Nei's D
table(PGH_wiens_dif_geno$NeisD_pop == PGH_wiens_dif_vcf$NeisD_pop)
table(PGH_wiens_dif_geno$NeisD_pop == PGH_wiens_dif_vcfR$NeisD_pop)
# Individual Nei's D
table(PGH_wiens_dif_geno$NeisD_ind == PGH_wiens_dif_vcf$NeisD_ind)
table(PGH_wiens_dif_geno$NeisD_ind == PGH_wiens_dif_vcfR$NeisD_ind)
# Jost's D
table(PGH_wiens_dif_geno$JostsD == PGH_wiens_dif_vcf$JostsD)
table(PGH_wiens_dif_geno$JostsD == PGH_wiens_dif_vcfR$JostsD)
# Jost's D with mmod
mmod_wiens_JD <- pairwise_D(Genind2)
## Fst and Nei's D with StAMPP
# Fst
Stmp_fst2 <- stamppFst(Glight2, nboots = 0)
# Population Nei's D
Stmp_popND2 <- stamppNeisD(Glight2)
# Individual Nei's D
Stmp_indND2 <- stamppNeisD(Glight2, pop = FALSE)
#####################################
##### Murphy et al. (2025) data #####
#####################################
murphy_vcf2 <- read.vcfR('Murphy_CF_final.recode.vcf')
murphy_pops <- read.delim("Murphy_CF_popmap_final.txt", header = F)
murphy_pops$V2[murphy_pops$V2 == "5R"] <- "fiveR"
colnames(murphy_pops) <- c("Inds", "population")
Genind4 <- vcfR2genind(murphy_vcf2)
Genind4@pop <- as.factor(murphy_pops$population)
ploidy(Genind4) <- 2
Glight4 <- vcfR2genlight(murphy_vcf2)
Glight4@pop <- as.factor(murphy_pops$population)
ploidy(Glight4) <- 2
# Test differentiation with PGH
PGH_murphy_dif2_JDwNA <- Differentiation(data = murphy_vcf2, pops = murphy_pops, statistic = "all")
PGH_murphy_wNA_JD <- as.matrix(PGH_murphy_dif2_JDwNA$JostsD)
# Jost's D with mmod
mmod_murphy_JD_wNA <- pairwise_D(Genind4)
mmod_murphy_JD_mat_wNA <- as.matrix(mmod_murphy_JD_wNA)
# Fst and Neis D
Stmp_fst4 <- stamppFst(Glight4, nboots = 0)
Stmp_popND4 <- stamppNeisD(Glight4)
Stmp_indND4 <- stamppNeisD(Glight4, pop = FALSE)
### Let's see how different the estimates from the different packages are?
# Make the StAMPP and mmod results matrices with the upper triangle NA
# Farleigh et al. (2021) data
mmod_mat <- as.matrix(mmod)
mmod_mat[upper.tri(mmod_mat)] <- NA
Stmp_indND_mat <- Stmp_indND
Stmp_indND_mat[upper.tri(Stmp_indND_mat)] <- NA
Stmp_popND_mat <- Stmp_popND
Stmp_popND_mat[upper.tri(Stmp_popND_mat)] <- NA
# Wiens data
mmod_wiens_JD_mat <- as.matrix(mmod_wiens_JD)
mmod_wiens_JD_mat[upper.tri(mmod_wiens_JD_mat)] <- NA
Stmp_indND2_mat <- Stmp_indND2
Stmp_indND2_mat[upper.tri(Stmp_indND2_mat)] <- NA
Stmp_popND2_mat <- Stmp_popND2
Stmp_popND2_mat[upper.tri(Stmp_popND2_mat)] <- NA
# Murphy data
mmod_murphy_JD_mat_wNA <- as.matrix(mmod_murphy_JD_wNA)
mmod_murphy_JD_mat_wNA[upper.tri(mmod_murphy_JD_mat_wNA)] <- NA
Stmp_indND4_mat <- Stmp_indND4
Stmp_indND4_mat[upper.tri(Stmp_indND4_mat)] <- NA
Stmp_popND4_mat <- Stmp_popND4
Stmp_popND4_mat[upper.tri(Stmp_popND4_mat)] <- NA
## Jost's D
# Farleigh et al. (2021) data
max(abs(PGH_dif_HL$JostsD-mmod_mat), na.rm = T)
mean(PGH_dif_HL$JostsD-mmod_mat, na.rm = T)
median(PGH_dif_HL$JostsD-mmod_mat, na.rm = T)
# Wiens data
max(abs(PGH_wiens_dif_vcf$JostsD-mmod_wiens_JD_mat), na.rm = T)
mean(PGH_wiens_dif_vcf$JostsD-mmod_wiens_JD_mat, na.rm = T)
median(PGH_wiens_dif_vcf$JostsD-mmod_wiens_JD_mat, na.rm = T)
# Murphy data needs to be looped, mmod outputs populations in different order than PGH
murph_pop <- unique(murphy_pops$population)
# get the comparisons
murph_comps <- combn(murph_pop, m = 2)
JD_abs_dif <- c()
JD_dif <- c()
for(i in 1:ncol(murph_comps)){
tmp_comp <- murph_comps[,i]
tmp_pop1 <- tmp_comp[1]
tmp_pop2 <- tmp_comp[2]
idx_pop1 <- which(colnames(mmod_murphy_JD_mat_wNA) == tmp_pop1)
idx_pop2 <- which(rownames(mmod_murphy_JD_mat_wNA) == tmp_pop2)
tmp_mmod <- mmod_murphy_JD_mat_wNA[idx_pop2, idx_pop1]
tmp_mmod <- c(tmp_mmod, mmod_murphy_JD_mat_wNA[idx_pop1, idx_pop2])
tmp_mmod <- na.omit(tmp_mmod)
idx_pop1_PGH <- which(colnames(PGH_murphy_wNA_JD) == tmp_pop1)
idx_pop2_PGH <- which(colnames(PGH_murphy_wNA_JD) == tmp_pop2)
tmp_PGH <- PGH_murphy_wNA_JD[idx_pop2_PGH, idx_pop1_PGH]
tmp_PGH <- c(tmp_PGH,PGH_murphy_wNA_JD[idx_pop1_PGH, idx_pop2_PGH])
tmp_PGH <- na.omit(tmp_PGH)
JD_abs_dif <- c(JD_abs_dif, abs(tmp_PGH-tmp_mmod))
JD_dif <- c(JD_dif, tmp_PGH-tmp_mmod)
remove(idx_pop1,idx_pop1_PGH,idx_pop2,idx_pop2_PGH,tmp_PGH,tmp_mmod)
}
max(JD_abs_dif)
mean(JD_dif)
median(JD_dif)
## Fst
# Farleigh et al. (2021) data
max(abs(PGH_dif_HL$Fst-Stmp_fst), na.rm = T)
mean(PGH_dif_HL$Fst-Stmp_fst, na.rm = T)
median(PGH_dif_HL$Fst-Stmp_fst, na.rm = T)
# Wiens data
max(abs(PGH_wiens_dif_vcf$Fst-Stmp_fst2), na.rm = T)
mean(PGH_wiens_dif_vcf$Fst-Stmp_fst2, na.rm = T)
median(PGH_wiens_dif_vcf$Fst-Stmp_fst2, na.rm = T)
# Murphy with NAs
max(abs(PGH_murphy_dif2_JDwNA$Fst-Stmp_fst4), na.rm = T)
mean(PGH_murphy_dif2_JDwNA$Fst-Stmp_fst4, na.rm = T)
median(PGH_murphy_dif2_JDwNA$Fst-Stmp_fst4, na.rm = T)
## Population Nei's D
# Farleigh et al. (2021) data
max(abs(PGH_dif_HL$NeisD_pop-Stmp_popND), na.rm = T)
mean(PGH_dif_HL$NeisD_pop-Stmp_popND, na.rm = T)
median(PGH_dif_HL$NeisD_pop-Stmp_popND, na.rm = T)
# Wiens data
max(abs(PGH_wiens_dif_vcf$NeisD_pop-Stmp_popND2_mat), na.rm = T)
mean(PGH_wiens_dif_vcf$NeisD_pop-Stmp_popND2_mat, na.rm = T)
median(PGH_wiens_dif_vcf$NeisD_pop-Stmp_popND2_mat, na.rm = T)
# Murphy with NA
max(abs(PGH_murphy_dif2_JDwNA$NeisD_pop-Stmp_popND4_mat), na.rm = T)
mean(PGH_murphy_dif2_JDwNA$NeisD_pop-Stmp_popND4_mat, na.rm = T)
median(PGH_murphy_dif2_JDwNA$NeisD_pop-Stmp_popND4_mat, na.rm = T)
## Individual Nei's D
# Farleigh et al. (2021) data
max(abs(PGH_dif_HL$NeisD_ind-Stmp_indND), na.rm = T)
mean(PGH_dif_HL$NeisD_ind-Stmp_indND, na.rm = T)
median(PGH_dif_HL$NeisD_ind-Stmp_indND, na.rm = T)
# Wiens data
max(abs(PGH_wiens_dif_vcf$NeisD_ind-Stmp_indND2_mat), na.rm = T)
mean(PGH_wiens_dif_vcf$NeisD_ind-Stmp_indND2_mat, na.rm = T)
median(PGH_wiens_dif_vcf$NeisD_ind-Stmp_indND2_mat, na.rm = T)
# Murphy with NA
max(abs(PGH_murphy_dif2_JDwNA$NeisD_ind-Stmp_indND4_mat), na.rm = T)
mean(PGH_murphy_dif2_JDwNA$NeisD_ind-Stmp_indND4_mat, na.rm = T)
median(PGH_murphy_dif2_JDwNA$NeisD_ind-Stmp_indND4_mat, na.rm = T)
##########################
##### Heterozygosity #####
##########################
# We need to rename populations 0, 1, and 2 in the weins data or we will get a warning message. It does not seem to affect the calculations, but we will do it to be safe.
wiens_pops$Population[wiens_pops$Population == 0] <- 21
wiens_pops$Population[wiens_pops$Population == 1] <- 22
wiens_pops$Population[wiens_pops$Population == 2] <- 23
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop)
PGH_het_wiens_vcf <- Heterozygosity(data = wiens_files[2], pops = wiens_pops)
PGH_het_wiens_vcfR <- Heterozygosity(data = wiens_vcf, pops = wiens_pops)
PGH_het_wiens_geno <- Heterozygosity(data = wiens_files[3], pops = wiens_pops)
PGH_het_murphy_wNA <- Heterozygosity(data = murphy_vcf2, pops = murphy_pops)
# Check to make sure the heterozygosity estimates match regardless of file type
table(PGH_het_wiens_geno$Ho_perpop == PGH_het_wiens_vcf$Ho_perpop)
table(PGH_het_wiens_geno$Ho_perloc == PGH_het_wiens_vcf$Ho_perloc)
table(PGH_het_wiens_geno$He_perpop == PGH_het_wiens_vcf$He_perpop)
table(PGH_het_wiens_geno$He_perloc == PGH_het_wiens_vcf$He_perloc)
table(PGH_het_wiens_geno$PHt == PGH_het_wiens_vcf$PHt)
table(PGH_het_wiens_geno$Hs_exp  == PGH_het_wiens_vcf$Hs_exp)
table(PGH_het_wiens_geno$Hs_obs  == PGH_het_wiens_vcf$Hs_obs)
table(PGH_het_wiens_geno$IR  == PGH_het_wiens_vcf$IR)
table(PGH_het_wiens_geno$HL  == PGH_het_wiens_vcf$HL)
table(PGH_het_wiens_geno$Ho_perpop == PGH_het_wiens_vcfR$Ho_perpop)
table(PGH_het_wiens_geno$Ho_perloc == PGH_het_wiens_vcfR$Ho_perloc)
table(PGH_het_wiens_geno$He_perpop == PGH_het_wiens_vcfR$He_perpop)
table(PGH_het_wiens_geno$He_perloc == PGH_het_wiens_vcfR$He_perloc)
table(PGH_het_wiens_geno$PHt == PGH_het_wiens_vcfR$PHt)
table(PGH_het_wiens_geno$Hs_exp  == PGH_het_wiens_vcfR$Hs_exp)
table(PGH_het_wiens_geno$Hs_obs  == PGH_het_wiens_vcfR$Hs_obs)
table(PGH_het_wiens_geno$IR  == PGH_het_wiens_vcfR$IR)
table(PGH_het_wiens_geno$HL  == PGH_het_wiens_vcfR$HL)
### Check to make sure they match with other programs
## Observed heterozygosity
# Horned lizard
Hstat_HL <- genind2hierfstat(Genind)
Hstat_hets_HL <- basic.stats(Hstat_HL)
Hstat_Ho_HL <- colMeans(Hstat_hets_HL$Ho)
# Weins
# Reset the weins genind
Genind2@pop <- as.factor(wiens_pops$Population)
Hstat_weins <- genind2hierfstat(Genind2)
Hstat_het_weins <- basic.stats(Hstat_weins)
Hstat_Ho_weins <- colMeans(Hstat_het_weins$Ho)
# Murphy
Hstat_murphy_wNA <- genind2hierfstat(Genind4)
Hstat_hets_murphy_wNA <- basic.stats(Hstat_murphy_wNA)
Hstat_Ho_murphy_wNA <- colMeans(Hstat_hets_murphy_wNA$Ho, na.rm = T)
# Check if the horned lizard ones match
max(abs(PGH_het_HL$Ho_perpop[,1]-Hstat_Ho_HL))
mean(PGH_het_HL$Ho_perpop[,1]-Hstat_Ho_HL)
median(PGH_het_HL$Ho_perpop[,1]-Hstat_Ho_HL)
# Check if weins matched
max(abs(PGH_het_wiens_vcf$Ho_perpop[order(match(PGH_het_wiens_vcf$Ho_perpop$Pop, names(Hstat_Ho_weins))),1] - Hstat_Ho_weins))
mean(PGH_het_wiens_vcf$Ho_perpop[order(match(PGH_het_wiens_vcf$Ho_perpop$Pop, names(Hstat_Ho_weins))),1] - Hstat_Ho_weins)
median(PGH_het_wiens_vcf$Ho_perpop[order(match(PGH_het_wiens_vcf$Ho_perpop$Pop, names(Hstat_Ho_weins))),1] - Hstat_Ho_weins)
# Check if murphy data matched, we do this manually because they are ordered differently
max(abs(PGH_het_murphy_wNA$Ho_perpop[order(match(PGH_het_murphy_wNA$Ho_perpop$Pop, names(Hstat_Ho_murphy_wNA))),1] - Hstat_Ho_murphy_wNA))
mean(PGH_het_murphy_wNA$Ho_perpop[order(match(PGH_het_murphy_wNA$Ho_perpop$Pop, names(Hstat_Ho_murphy_wNA))),1] - Hstat_Ho_murphy_wNA)
median(PGH_het_murphy_wNA$Ho_perpop[order(match(PGH_het_murphy_wNA$Ho_perpop$Pop, names(Hstat_Ho_murphy_wNA))),1] - Hstat_Ho_murphy_wNA)
## Expected heterozygosity (He)
# Horned lizard
He_HL <- Hs(Genind)
# Weins
He_weins <- Hs(Genind2)
# Murphy
He_murphy_wNA <- Hs(Genind4)
# Check if the horned lizard ones match
max(abs(PGH_het_HL$He_perpop$Expected.Heterozygosity-He_HL))
mean(PGH_het_HL$He_perpop$Expected.Heterozygosity-He_HL)
median(PGH_het_HL$He_perpop$Expected.Heterozygosity-He_HL)
# Check if the weins ones match
max(abs(PGH_het_wiens_vcf$He_perpop[order(match(PGH_het_wiens_vcf$He_perpop$Pop, names(He_weins))),1]-He_weins))
mean(PGH_het_wiens_vcf$He_perpop[order(match(PGH_het_wiens_vcf$He_perpop$Pop, names(He_weins))),1]-He_weins)
median(PGH_het_wiens_vcf$He_perpop[order(match(PGH_het_wiens_vcf$He_perpop$Pop, names(He_weins))),1]-He_weins)
# Check if the murphy ones match
max(abs(PGH_het_murphy_wNA$He_perpop[order(match(PGH_het_murphy_wNA$He_perpop$Pop, names(He_murphy_wNA))),1]-He_murphy_wNA))
mean(PGH_het_murphy_wNA$He_perpop[order(match(PGH_het_murphy_wNA$He_perpop$Pop, names(He_murphy_wNA))),1]-He_murphy_wNA)
median(PGH_het_murphy_wNA$He_perpop[order(match(PGH_het_murphy_wNA$He_perpop$Pop, names(He_murphy_wNA))),1]-He_murphy_wNA)
#############################################
### Test statistics originally from Rhh #####
#############################################
source("./DC_hetero.R")
# Farleigh et al. (2021)
HL_rhh <- as.data.frame(t(extract.gt(HornedLizard_VCF, return.alleles = T)))
HL_rhh <- HL_rhh %>%
separate_wider_delim(everything(), delim = "/", names_sep = ".")
HL_rhh_final <- cbind(HornedLizard_Pop[1:2], HL_rhh)
HL_ir <- ir(HL_rhh_final)
HL_hl <- hl(HL_rhh_final)
# Weins & Collela (2025)
weins_rhh <- as.data.frame(t(extract.gt(wiens_vcf, return.alleles = T)))
weins_rhh <- weins_rhh %>%
separate_wider_delim(everything(), delim = "|", names_sep = ".")
weins_rhh_final <- cbind(wiens_pops[1:2], weins_rhh)
weins_ir <- ir(weins_rhh_final)
weins_hl <- hl(weins_rhh_final)
# Murphy et al. (2025)
murphy_rhh <- as.data.frame(t(extract.gt(murphy_vcf2, return.alleles = T)))
murphy_rhh[murphy_rhh == "."] <- NA/NA
murphy_rhh <- murphy_rhh %>%
separate_wider_delim(everything(), delim = "/", names_sep = ".")
murphy_rhh_final <- cbind(murphy_pops[1:2], murphy_rhh)
murphy_ir <- ir(murphy_rhh_final)
murphy_hl <- hl(murphy_rhh_final)
### Use the functions from Daren Card's script to test IR and HL
# Farleigh et al. (2021)
max(PGH_het_HL$IR[,1]-HL_ir, na.rm = T)
mean(PGH_het_HL$IR[,1]-HL_ir, na.rm = T)
median(PGH_het_HL$IR[,1]-HL_ir, na.rm = T)
# Weins & Collela (2025)
max(PGH_het_wiens_vcf$IR[,1]-weins_ir, na.rm = T)
mean(PGH_het_wiens_vcf$IR[,1]-weins_ir, na.rm = T)
median(PGH_het_wiens_vcf$IR[,1]-weins_ir, na.rm = T)
# Murphy et al. (2025)
max(PGH_het_murphy_wNA$IR[,1]-murphy_ir, na.rm = T)
mean(PGH_het_murphy_wNA$IR[,1]-murphy_ir, na.rm = T)
median(PGH_het_murphy_wNA$IR[,1]-murphy_ir, na.rm = T)
# Farleigh et al. (2021)
max(PGH_het_HL$HL[,1]-HL_hl, na.rm = T)
mean(PGH_het_HL$HL[,1]-HL_hl, na.rm = T)
median(PGH_het_HL$HL[,1]-HL_hl, na.rm = T)
# Weins & Collela (2025)
max(PGH_het_wiens_vcf$HL[,1]-weins_hl, na.rm = T)
mean(PGH_het_wiens_vcf$HL[,1]-weins_hl, na.rm = T)
median(PGH_het_wiens_vcf$HL[,1]-weins_hl, na.rm = T)
# Murphy et al. (2025)
max(PGH_het_murphy_wNA$HL[,1]-murphy_hl, na.rm = T)
mean(PGH_het_murphy_wNA$HL[,1]-murphy_hl, na.rm = T)
median(PGH_het_murphy_wNA$HL[,1]-murphy_hl, na.rm = T)
##############################################
##### Make sure the write arguments work #####
##############################################
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all", prefix = "./write_test_wprefix/HL_test_dif_all", write = T)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_het_all", write = TRUE, statistic = "all")
PGH_PA_HL <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_pa", write = TRUE)
# Let's just try a single statistic for each, with a prefix
Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst", prefix = "./write_test_wprefix/HL_test_dif_Fst", write = T)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, prefix = "./write_test_wprefix/HL_test_het_Ho", write = TRUE, statistic = "Ho")
# Let's try with no prefix
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "",, write = T)
PGH_dif_HL <- Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "all",, write = T)
PGH_het_HL <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE, statistic = "all")
PGH_PA_HL <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE)
# Let's just try a single statistic for each, without a prefix
Differentiation(HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst", write = T)
Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, write = TRUE, statistic = "Ho")
save.image("C:/Users/keaka/OneDrive/Desktop/Github/PopGenHelpR_testing/PGH_stattesting_workspace.RData")
load("C:/Users/keaka/OneDrive/Desktop/Github/PopGenHelpR_testing/PGH_stattesting_workspace.RData")
